version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: eventcad-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-eventcad}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-eventcad123}
      POSTGRES_DB: ${DB_NAME:-eventcad}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - eventcad-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-eventcad}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: eventcad-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - eventcad-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend NestJS API
  backend:
    build:
      context: ./eventcad-backend
      dockerfile: Dockerfile
    container_name: eventcad-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${BACKEND_PORT:-3000}
      DATABASE_URL: postgresql://${DB_USER:-eventcad}:${DB_PASSWORD:-eventcad123}@postgres:5432/${DB_NAME:-eventcad}
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost}
      AI_SERVICE_URL: ${AI_SERVICE_URL:-http://ai-service:8000}
      UPLOAD_PATH: /app/uploads
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-52428800}
    volumes:
      - uploads_data:/app/uploads
      - ./eventcad-backend:/app
      - /app/node_modules
    ports:
      - "${BACKEND_PORT:-3000}:3000"
    networks:
      - eventcad-network


  # Frontend React App
  frontend:
    build:
      context: ./eventcad-frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:3000}
    container_name: eventcad-frontend
    restart: unless-stopped
    depends_on:
      - backend
    environment:
      NODE_ENV: ${NODE_ENV:-production}
    ports:
      - "8081:80"
    networks:
      - eventcad-network

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: eventcad-nginx
    restart: unless-stopped
    depends_on:
      - backend
      - frontend
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ssl_certs:/etc/nginx/ssl
    ports:
      - "443:443"
      - "8080:80"
    networks:
      - eventcad-network
    profiles:
      - production

  # AI Service (Python/FastAPI)
  ai-service:
    build:
      context: ./eventcad-ai
      dockerfile: Dockerfile
    container_name: eventcad-ai
    restart: unless-stopped
    depends_on:
      - redis
    environment:
      REDIS_URL: redis://redis:6379
      MODEL_PATH: /app/models
      MAX_WORKERS: ${AI_MAX_WORKERS:-4}
    volumes:
      - ai_models:/app/models
      - uploads_data:/app/uploads:ro
    ports:
      - "${AI_PORT:-8000}:8000"
    networks:
      - eventcad-network
    profiles:
      - ai

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  ai_models:
    driver: local
  ssl_certs:
    driver: local

networks:
  eventcad-network:
    driver: bridge