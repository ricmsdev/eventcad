# Docker Compose para desenvolvimento do EventCAD+
# Inclui todos os serviços necessários para desenvolvimento local

version: '3.8'

services:
  # Banco de dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: eventcad-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: eventcad_db
      POSTGRES_USER: eventcad_user
      POSTGRES_PASSWORD: eventcad_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=pt_BR.UTF-8 --lc-ctype=pt_BR.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - eventcad-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U eventcad_user -d eventcad_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Cache Redis (para sessões e cache)
  redis:
    image: redis:7-alpine
    container_name: eventcad-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - eventcad-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend da aplicação
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: eventcad-backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3000
      API_PREFIX: api/v1
      
      # Database
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: eventcad_user
      DATABASE_PASSWORD: eventcad_password
      DATABASE_NAME: eventcad_db
      
      # JWT
      JWT_SECRET: dev-secret-eventcad-2025-change-in-production
      JWT_EXPIRES_IN: 8h
      JWT_REFRESH_SECRET: dev-refresh-secret-eventcad-2025
      JWT_REFRESH_EXPIRES_IN: 7d
      
      # Security
      RATE_LIMIT_TTL: 60
      RATE_LIMIT_LIMIT: 1000
      BCRYPT_ROUNDS: 10
      
      # CORS
      CORS_ORIGIN: http://localhost:3001,http://localhost:3000
      
      # Upload
      UPLOAD_MAX_SIZE: 104857600
      UPLOAD_DESTINATION: ./uploads
      STORAGE_TYPE: local
      
      # Multi-tenant
      TENANT_ISOLATION: true
      DEFAULT_TENANT: default
      
      # AI Service (mock para desenvolvimento)
      AI_SERVICE_URL: http://ai-service:8000
      AI_SERVICE_API_KEY: dev-ai-key
      
    ports:
      - "3000:3000"
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./src:/app/src:ro  # Para hot reload em desenvolvimento
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - eventcad-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Mock do serviço de AI (para desenvolvimento)
  ai-service:
    image: python:3.11-slim
    container_name: eventcad-ai-service
    restart: unless-stopped
    working_dir: /app
    command: >
      sh -c "
        pip install fastapi uvicorn python-multipart pillow numpy &&
        python -c \"
from fastapi import FastAPI, File, UploadFile
from fastapi.responses import JSONResponse
import json

app = FastAPI(title='EventCAD+ AI Service Mock')

@app.get('/health')
def health():
    return {'status': 'ok', 'service': 'ai-recognition'}

@app.post('/recognize')
async def recognize_plant(file: UploadFile = File(...)):
    # Mock response simulating AI recognition
    return {
        'success': True,
        'objects': [
            {'type': 'door', 'x': 100, 'y': 200, 'width': 80, 'height': 200, 'confidence': 0.95},
            {'type': 'exit', 'x': 300, 'y': 150, 'width': 120, 'height': 220, 'confidence': 0.88},
            {'type': 'sprinkler', 'x': 450, 'y': 50, 'width': 20, 'height': 20, 'confidence': 0.92},
            {'type': 'electrical_panel', 'x': 50, 'y': 50, 'width': 60, 'height': 80, 'confidence': 0.87}
        ],
        'metadata': {
            'processing_time': 2.3,
            'model_version': 'eventcad-v1.0-mock',
            'file_size': len(await file.read()) if file else 0
        }
    }

@app.post('/compliance/check')
def check_compliance(data: dict):
    return {
        'compliant': True,
        'score': 0.85,
        'issues': [
            {'type': 'warning', 'message': 'Corredor principal pode estar estreito', 'severity': 'medium'},
            {'type': 'info', 'message': 'Recomenda-se verificar altura dos extintores', 'severity': 'low'}
        ]
    }

if __name__ == '__main__':
    import uvicorn
    uvicorn.run(app, host='0.0.0.0', port=8000)
        \" &&
        python -c 'import uvicorn; uvicorn.run(\"__main__:app\", host=\"0.0.0.0\", port=8000)'
      "
    ports:
      - "8000:8000"
    networks:
      - eventcad-network
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Adminer para gerenciamento do banco (opcional)
  adminer:
    image: adminer:4-standalone
    container_name: eventcad-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    networks:
      - eventcad-network
    profiles:
      - tools

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  eventcad-network:
    driver: bridge
    name: eventcad-network